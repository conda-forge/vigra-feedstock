diff --git vigranumpy/src/core/accumulator-region-multiband.cxx vigranumpy/src/core/accumulator-region-multiband.cxx
index a85a2a56d..d5bc97df9 100644
--- vigranumpy/src/core/accumulator-region-multiband.cxx
+++ vigranumpy/src/core/accumulator-region-multiband.cxx
@@ -43,14 +43,22 @@ namespace python = boost::python;
 namespace vigra
 {
 
+// workaround for compiler bug in VS 2015 (compiler fails to match the template
+// function get_pointer() at line 20 of boost/get_pointer.hpp)
+namespace acc
+{
+	inline PythonRegionFeatureAccumulator const volatile *
+    get_pointer(PythonRegionFeatureAccumulator const volatile * p) { return p; }
+}
+
 void defineMultibandRegionAccumulators()
 {
     using namespace python;
     using namespace vigra::acc;
 
     docstring_options doc_options(true, true, false);
-    
-    typedef Select<Count, Mean, Variance, Skewness, Kurtosis, Covariance, 
+
+    typedef Select<Count, Mean, Variance, Skewness, Kurtosis, Covariance,
                    Principal<Variance>, Principal<Skewness>, Principal<Kurtosis>,
                    Principal<CoordinateSystem>,
                    Minimum, Maximum, Principal<Minimum>, Principal<Maximum>,
@@ -61,7 +69,7 @@ void defineMultibandRegionAccumulators()
 
     definePythonAccumulatorArrayMultiband<3, float, VectorRegionAccumulators>();
     definePythonAccumulatorArrayMultiband<4, float, VectorRegionAccumulators>();
-    
+
     definePythonAccumulatorArray<2, TinyVector<float, 3>, VectorRegionAccumulators>();
     definePythonAccumulatorArray<3, TinyVector<float, 3>, VectorRegionAccumulators>();
 }
diff --git vigranumpy/src/core/accumulator-region-singleband.cxx vigranumpy/src/core/accumulator-region-singleband.cxx
index 7d1869455..65d078ea0 100644
--- vigranumpy/src/core/accumulator-region-singleband.cxx
+++ vigranumpy/src/core/accumulator-region-singleband.cxx
@@ -44,6 +44,14 @@ namespace python = boost::python;
 namespace vigra
 {
 
+// workaround for compiler bug in VS 2015 (compiler fails to match the template
+// function get_pointer() at line 20 of boost/get_pointer.hpp)
+namespace acc
+{
+	inline PythonRegionFeatureAccumulator const volatile *
+    get_pointer(PythonRegionFeatureAccumulator const volatile * p) { return p; }
+}
+
 // Helper functions for stringification of macro string constants
 #define STR(s) #s
 #define XSTR(s) s
@@ -95,7 +103,7 @@ extractConvexHullFeatures(NumpyArray<N, Singleband<T> > const & labels,
     TinyVector<npy_intp, N> permutation = labels.template permuteLikewise<N>();
 
     AccumulatorChainArray<
-            CoupledArrays<N, T>, 
+            CoupledArrays<N, T>,
             Select<ConvexHullFeatures, DataArg<1>, LabelArg<1> > > acc;
 
     MultiArrayIndex ignored_label = -1;
@@ -212,14 +220,14 @@ pyExtractSkeletonFeatures(NumpyArray<N, Singleband<T> > const & labels,
 
     {
         PyAllowThreads _pythread;
-        
-        extractSkeletonFeatures(labels, features, 
+
+        extractSkeletonFeatures(labels, features,
                                 SkeletonOptions().pruneSalienceRelative(pruning_threshold));
     }
-    
+
     int size = features.size();
     python::dict res;
-    
+
     #define VIGRA_SKELETON_FEATURE(TYPE, NAME, ATTRIBUTE) \
     { \
         NumpyArray<1, TYPE> array((Shape1(size))); \
@@ -229,16 +237,16 @@ pyExtractSkeletonFeatures(NumpyArray<N, Singleband<T> > const & labels,
         } \
         res[XSTR(NAME)] = array; \
     }
-    
+
     VIGRA_SKELETON_FEATURE(double, VIGRA_SKELETON_FEATURE_DIAMETER, diameter)
     VIGRA_SKELETON_FEATURE(double, VIGRA_SKELETON_FEATURE_EUCLIDEAN_DIAMETER, euclidean_diameter)
     VIGRA_SKELETON_FEATURE(double, VIGRA_SKELETON_FEATURE_TOTAL_LENGTH, total_length)
     VIGRA_SKELETON_FEATURE(double, VIGRA_SKELETON_FEATURE_AVERAGE_LENGTH, average_length)
     VIGRA_SKELETON_FEATURE(npy_uint32, VIGRA_SKELETON_FEATURE_BRANCH_COUNT, branch_count)
     VIGRA_SKELETON_FEATURE(npy_uint32,VIGRA_SKELETON_FEATURE_HOLE_COUNT, hole_count)
-    
+
     #undef VIGRA_SKELETON_FEATURE
-        
+
     #define VIGRA_SKELETON_VECTOR_FEATURE(NAME, ATTRIBUTE) \
     { \
         NumpyArray<2, double> array(Shape2(size, N)); \
@@ -249,11 +257,11 @@ pyExtractSkeletonFeatures(NumpyArray<N, Singleband<T> > const & labels,
         } \
         res[XSTR(NAME)] = array; \
     }
-    
+
     VIGRA_SKELETON_VECTOR_FEATURE(VIGRA_SKELETON_VECTOR_FEATURE_CENTER, center)
     VIGRA_SKELETON_VECTOR_FEATURE(VIGRA_SKELETON_VECTOR_FEATURE_TERMINAL_1, terminal1)
     VIGRA_SKELETON_VECTOR_FEATURE(VIGRA_SKELETON_VECTOR_FEATURE_TERMINAL_2, terminal2)
-    
+
     #undef VIGRA_SKELETON_VECTOR_FEATURE
 
     return res;
@@ -265,20 +273,20 @@ void defineSinglebandRegionAccumulators()
     using namespace vigra::acc;
 
     docstring_options doc_options(true, true, false);
-    typedef Select<Count, Mean, Variance, Skewness, Kurtosis, 
+    typedef Select<Count, Mean, Variance, Skewness, Kurtosis,
                    Minimum, Maximum, StandardQuantiles<GlobalRangeHistogram<0> >,
                    RegionCenter, RegionRadii, RegionAxes,
                    Weighted<RegionCenter>, Weighted<RegionRadii>, Weighted<RegionAxes>,
-                   Select<Coord<Minimum>, Coord<Maximum>, Coord<ArgMinWeight>, Coord<ArgMaxWeight>, 
-                          Principal<Coord<Skewness> >, Principal<Coord<Kurtosis> >, 
+                   Select<Coord<Minimum>, Coord<Maximum>, Coord<ArgMinWeight>, Coord<ArgMaxWeight>,
+                          Principal<Coord<Skewness> >, Principal<Coord<Kurtosis> >,
                           Principal<Weighted<Coord<Skewness> > >, Principal<Weighted<Coord<Kurtosis> > > >,
                    DataArg<1>, WeightArg<1>, LabelArg<2>
                    > ScalarRegionAccumulators;
     definePythonAccumulatorArraySingleband<2, float, ScalarRegionAccumulators>();
     definePythonAccumulatorArraySingleband<3, float, ScalarRegionAccumulators>();
-    
+
 #ifdef WITH_LEMON
-    def("extract2DConvexHullFeatures", 
+    def("extract2DConvexHullFeatures",
         registerConverters(&extractConvexHullFeatures<2, npy_uint32>),
         (   arg("labels"),
             arg("ignoreLabel")=python::object(),
@@ -309,7 +317,7 @@ void defineSinglebandRegionAccumulators()
         "   - HullCenter : center of the convex hull\n\n"
         "   - DefectCenter : center of the defects\n\n");
 
-    def("extract3DConvexHullFeatures", 
+    def("extract3DConvexHullFeatures",
         registerConverters(&extractConvexHullFeatures<3, npy_uint32>),
         (   arg("labels"),
             arg("ignoreLabel")=python::object(),
@@ -341,7 +349,7 @@ void defineSinglebandRegionAccumulators()
         "   - DefectCenter : center of the defects\n\n");
 #endif // WITH_LEMON
 
-    def("extractSkeletonFeatures", 
+    def("extractSkeletonFeatures",
          registerConverters(&pyExtractSkeletonFeatures<2, npy_uint32>),
          (arg("labels"),
           arg("pruning_threshold")=0.2,
diff --git vigranumpy/src/core/accumulator.cxx vigranumpy/src/core/accumulator.cxx
index 6378a2da4..8bc1fc48f 100644
--- vigranumpy/src/core/accumulator.cxx
+++ vigranumpy/src/core/accumulator.cxx
@@ -43,9 +43,17 @@ namespace python = boost::python;
 namespace vigra
 {
 
-namespace acc 
+// workaround for compiler bug in VS 2015 (compiler fails to match the template
+// function get_pointer() at line 20 of boost/get_pointer.hpp)
+namespace acc
 {
 
+	inline PythonFeatureAccumulator const volatile *
+    get_pointer(PythonFeatureAccumulator const volatile * p) { return p; }
+
+	inline PythonRegionFeatureAccumulator const volatile *
+    get_pointer(PythonRegionFeatureAccumulator const volatile * p) { return p; }
+
 AliasMap defineAliasMap()
 {
     AliasMap res;
@@ -81,14 +89,14 @@ AliasMap * createTagToAlias(ArrayVector<std::string> const & names)
         std::string alias = (a == aliases.end())
                                ? names[k]
                                : a->second;
-                               
+
             // treat FlatScatterMatrix and ScatterMatrixEigensystem as internal,
             // i.e. use names only when they don't contain these strings
         if(alias.find("ScatterMatrixEigensystem") == std::string::npos &&
            alias.find("FlatScatterMatrix") == std::string::npos)
              (*res)[names[k]] = alias;
     }
-    return res.release();   
+    return res.release();
 }
 
 AliasMap * createAliasToTag(AliasMap const & tagToAlias)
@@ -116,11 +124,11 @@ void defineGlobalAccumulators()
     using namespace vigra::acc;
 
     docstring_options doc_options(true, true, false);
-    
+
     PythonFeatureAccumulator::definePythonClass();
     PythonRegionFeatureAccumulator::definePythonClass();
-    
-    typedef Select<Count, Mean, Variance, Skewness, Kurtosis, Covariance, 
+
+    typedef Select<Count, Mean, Variance, Skewness, Kurtosis, Covariance,
                    Principal<Variance>, Principal<Skewness>, Principal<Kurtosis>,
                    Principal<CoordinateSystem>,
                    Minimum, Maximum, Principal<Minimum>, Principal<Maximum>
@@ -128,12 +136,12 @@ void defineGlobalAccumulators()
 
     definePythonAccumulatorMultiband<3, float, VectorAccumulators>();
     definePythonAccumulatorMultiband<4, float, VectorAccumulators>();
-    
+
     definePythonAccumulator<TinyVector<float, 3>, VectorAccumulators>();
 
-    typedef Select<Count, Mean, Variance, Skewness, Kurtosis, 
+    typedef Select<Count, Mean, Variance, Skewness, Kurtosis,
                    UnbiasedVariance, UnbiasedSkewness, UnbiasedKurtosis,
-                   Minimum, Maximum, StandardQuantiles<AutoRangeHistogram<0> > 
+                   Minimum, Maximum, StandardQuantiles<AutoRangeHistogram<0> >
                    > ScalarAccumulators;
     definePythonAccumulatorSingleband<float, ScalarAccumulators>();
 }
@@ -151,7 +159,7 @@ void defineAccumulators()
     NumpyArrayConverter<NumpyArray<2, double> >();
     NumpyArrayConverter<NumpyArray<3, float> >();
     NumpyArrayConverter<NumpyArray<3, double> >();
-    
+
     defineGlobalAccumulators();
     // changed order (?)
     defineMultibandRegionAccumulators();
diff --git vigranumpy/src/core/multi_array_chunked.cxx vigranumpy/src/core/multi_array_chunked.cxx
index ac6d3056e..bbfb04243 100644
--- vigranumpy/src/core/multi_array_chunked.cxx
+++ vigranumpy/src/core/multi_array_chunked.cxx
@@ -54,6 +54,97 @@ namespace python = boost::python;
 
 namespace vigra {
 
+// workaround for compiler bug in VS 2015 (compiler fails to match the template
+// function get_pointer() at line 20 of boost/get_pointer.hpp)
+inline ChunkedArrayHDF5<1, float, class std::allocator<float> > const volatile *
+get_pointer(ChunkedArrayHDF5<1, float, class std::allocator<float> > const volatile * p) { return p; }
+
+inline ChunkedArrayHDF5<1, unsigned long, class std::allocator<unsigned long> > const volatile *
+get_pointer(ChunkedArrayHDF5<1, unsigned long, class std::allocator<unsigned long> > const volatile * p) { return p; }
+
+inline ChunkedArrayHDF5<1, unsigned char, class std::allocator<unsigned char> > const volatile *
+get_pointer(ChunkedArrayHDF5<1, unsigned char, class std::allocator<unsigned char> > const volatile * p) { return p; }
+
+
+inline ChunkedArrayHDF5<2, float, class std::allocator<float> > const volatile *
+get_pointer(ChunkedArrayHDF5<2, float, class std::allocator<float> > const volatile * p) { return p; }
+
+inline ChunkedArrayHDF5<2, unsigned char, class std::allocator<unsigned char> > const volatile *
+get_pointer(ChunkedArrayHDF5<2, unsigned char, class std::allocator<unsigned char> > const volatile * p) { return p; }
+
+inline ChunkedArrayHDF5<2, unsigned long, class std::allocator<unsigned long> > const volatile *
+get_pointer(ChunkedArrayHDF5<2, unsigned long, class std::allocator<unsigned long> > const volatile * p) { return p; }
+
+
+inline ChunkedArrayHDF5<3, float, class std::allocator<float> > const volatile *
+get_pointer(ChunkedArrayHDF5<3, float, class std::allocator<float> > const volatile * p) { return p; }
+
+inline ChunkedArrayHDF5<3, unsigned char, class std::allocator<unsigned char> > const volatile *
+get_pointer(ChunkedArrayHDF5<3, unsigned char, class std::allocator<unsigned char> > const volatile * p) { return p; }
+
+inline ChunkedArrayHDF5<3, unsigned long, class std::allocator<unsigned long> > const volatile *
+get_pointer(ChunkedArrayHDF5<3, unsigned long, class std::allocator<unsigned long> > const volatile * p) { return p; }
+
+
+inline ChunkedArrayHDF5<4, float, class std::allocator<float> > const volatile *
+get_pointer(ChunkedArrayHDF5<4, float, class std::allocator<float> > const volatile * p) { return p; }
+
+inline ChunkedArrayHDF5<4, unsigned char, class std::allocator<unsigned char> > const volatile *
+get_pointer(ChunkedArrayHDF5<4, unsigned char, class std::allocator<unsigned char> > const volatile * p) { return p; }
+
+inline ChunkedArrayHDF5<4, unsigned long, class std::allocator<unsigned long> > const volatile *
+get_pointer(ChunkedArrayHDF5<4, unsigned long, class std::allocator<unsigned long> > const volatile * p) { return p; }
+
+
+inline ChunkedArrayHDF5<5, float, class std::allocator<float> > const volatile *
+get_pointer(ChunkedArrayHDF5<5, float, class std::allocator<float> > const volatile * p) { return p; }
+
+inline ChunkedArrayHDF5<5, unsigned char, class std::allocator<unsigned char> > const volatile *
+get_pointer(ChunkedArrayHDF5<5, unsigned char, class std::allocator<unsigned char> > const volatile * p) { return p; }
+
+inline ChunkedArrayHDF5<5, unsigned long, class std::allocator<unsigned long> > const volatile *
+get_pointer(ChunkedArrayHDF5<5, unsigned long, class std::allocator<unsigned long> > const volatile * p) { return p; }
+
+
+inline ChunkedArray<2, float> const volatile *
+get_pointer(ChunkedArray<2, float> const volatile * p) { return p; }
+
+inline ChunkedArray<2, unsigned long> const volatile *
+get_pointer(ChunkedArray<2, unsigned long> const volatile * p) { return p; }
+
+inline ChunkedArray<2, unsigned char> const volatile *
+get_pointer(ChunkedArray<2, unsigned char> const volatile * p) { return p; }
+
+
+inline ChunkedArray<3, float> const volatile *
+get_pointer(ChunkedArray<3, float> const volatile * p) { return p; }
+
+inline ChunkedArray<3, unsigned long> const volatile *
+get_pointer(ChunkedArray<3, unsigned long> const volatile * p) { return p; }
+
+inline ChunkedArray<3, unsigned char> const volatile *
+get_pointer(ChunkedArray<3, unsigned char> const volatile * p) { return p; }
+
+
+inline ChunkedArray<4, float> const volatile *
+get_pointer(ChunkedArray<4, float> const volatile * p) { return p; }
+
+inline ChunkedArray<4, unsigned long> const volatile *
+get_pointer(ChunkedArray<4, unsigned long> const volatile * p) { return p; }
+
+inline ChunkedArray<4, unsigned char> const volatile *
+get_pointer(ChunkedArray<4, unsigned char> const volatile * p) { return p; }
+
+
+inline ChunkedArray<5, float> const volatile *
+get_pointer(ChunkedArray<5, float> const volatile * p) { return p; }
+
+inline ChunkedArray<5, unsigned long> const volatile *
+get_pointer(ChunkedArray<5, unsigned long> const volatile * p) { return p; }
+
+inline ChunkedArray<5, unsigned char> const volatile *
+get_pointer(ChunkedArray<5, unsigned char> const volatile * p) { return p; }
+
 template <unsigned int N, class T>
 TinyVector<MultiArrayIndex, N>
 ChunkedArray_shape(ChunkedArray<N, T> const & array)
